import asyncio
import logging
from copy import copy
from datetime import datetime, timedelta
from typing import Tuple

import pandas as pd

from send_msg_telegram import send_msg

from sqlalchemy import create_engine

from work import id_telegram, ivea_metrika

engine = create_engine(ivea_metrika)  # –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–µ–¥–∏–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(process)d-%(levelname)s %(message)s",
    datefmt="%d-%b-%y %H:%M:%S",
)

month_name = {
    1: "–Ø–Ω–≤–∞—Ä—è",
    2: "–§–µ–≤—Ä–∞–ª—è",
    3: "–ú–∞—Ä—Ç–∞",
    4: "–ê–ø—Ä–µ–ª—è",
    5: "–ú–∞—è",
    6: "–ò—é–Ω—è",
    7: "–ò—é–ª—è",
    8: "–ê–≤–≥—É—Å—Ç–∞",
    9: "–°–µ–Ω—Ç—è–±—Ä—è",
    10: "–û–∫—Ç—è–±—Ä—è",
    11: "–ù–æ—è–±—Ä—è",
    12: "–î–µ–∫–∞–±—Ä—è",
}


def finder(
    begin_text: str, testing: bool = False
) -> Tuple[str, dict[int, str]]:
    info = pd.read_sql(
        # "SELECT * FROM birthday WHERE verified = 'true';",
        """
SELECT bday.birthday, dkc.family_name, dkc.name,
dkc.position_at_work, dkc.user_id
FROM birthday as bday
JOIN doc_key_corp as dkc ON bday.id_user = dkc.id
WHERE bday.verified = 'true' AND dkc.user_id > 0;""",
        engine,
    )
    info["birthday"] = pd.to_datetime(info["birthday"])
    now = datetime.now()
    month_and_day = datetime(now.year, now.month, now.day).strftime("%m-%d")
    month_and_tomorrow_day = (now + timedelta(days=+1)).strftime("%m-%d")
    birthday_list: str = copy(begin_text)
    dict_text = dict()
    for idx, row in info.iterrows():
        if (
            int(now.strftime("%d")) == 1 or testing
        ):  # —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–∞–∂–¥—ã–π –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–∏—Å—Ç
            if int(row["birthday"].strftime("%m")) == int(now.strftime("%m")):
                birthday_list += f"{row['birthday'].strftime('%d')} \
{month_name[int(row['birthday'].strftime('%m'))]} - {row['family_name']} \
{row['name']} ({row['position_at_work']})\n"
        if row["birthday"].strftime("%m-%d") == month_and_day:
            dict_text[int(row["user_id"])] = (
                f"üéäüéâüéÇ –°–µ–≥–æ–¥–Ω—è —Å–≤–æ–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –æ—Ç–º–µ—á–∞–µ—Ç \
{row['family_name']} {row['name']} ({row['position_at_work']})üéÇüéâüéä"
            )
            logging.info(
                f"C–µ–≥–æ–¥–Ω—è —Å–≤–æ–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –æ—Ç–º–µ—á–∞–µ—Ç {row['family_name']} \
{row['name']} ({row['position_at_work']})"
            )
        elif row["birthday"].strftime("%m-%d") == month_and_tomorrow_day:
            dict_text[int(row["user_id"])] = (
                f"üéÇ –ó–∞–≤—Ç—Ä–∞ —Å–≤–æ–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –æ—Ç–º–µ—á–∞–µ—Ç \
{row['family_name']} {row['name']} ({row['position_at_work']}) üéÇ"
            )
            logging.info(
                f"–ó–∞–≤—Ç—Ä–∞ —Å–≤–æ–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –æ—Ç–º–µ—á–∞–µ—Ç \
{row['family_name']} {row['name']} ({row['position_at_work']})"
            )
    return birthday_list, dict_text


def send_sms_birthday(dict_text: dict[int, str]) -> None:
    info_corp = pd.read_sql(
        "SELECT * FROM doc_key_corp WHERE user_id > 0;", engine
    )
    for idx, row in info_corp.iterrows():
        res: bool = True
        for user_id, value in dict_text.items():
            if row["user_id"] != user_id:
                res = asyncio.run(
                    send_msg(user_id=int(row["user_id"]), msg=value)
                )
            elif "–°–µ–≥–æ–¥–Ω—è" in value:
                logging.info("üéäüéâüéÇ –° –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è!!! üéÇüéâüéä")
                res = asyncio.run(
                    send_msg(
                        user_id=user_id,
                        msg="üéäüéâüéÇ –° –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è!!! üéÇüéâüéä",
                    )
                )
            if not res:
                logging.error(
                    f'ERROR msg don\'t send - chat_id=\
{row["user_id"]} - "{row["name"]} {row["family_name"]}"'
                )
    return


def main() -> None:
    begin_text: str = "–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è —É —Å–ª–µ–¥—É—é—â–∏—Ö –ª—é–¥–µ–π:\n"

    birthday_list, dict_text = finder(begin_text=begin_text)
    if dict_text:
        send_sms_birthday(dict_text=dict_text)
    if birthday_list != begin_text:
        logging.info(birthday_list)
        for user_id in [
            id_telegram["Boss"],
            id_telegram["Pavel"],
            id_telegram["my"],
        ]:
            if send_msg(user_id=user_id, msg=birthday_list):
                logging.info(f"chat_id={user_id}")
    return


if __name__ == "__main__":
    main()
